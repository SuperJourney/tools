// Code generated by mockery v2.33.3. DO NOT EDIT.

package mock_demo

import (
	context "context"

	demo "github.com/SuperJourney/tools/libs/cache_wrapper/marshaler/example"
	mock "github.com/stretchr/testify/mock"
)

// DemoServiceI is an autogenerated mock type for the DemoServiceI type
type DemoServiceI struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx, req
func (_m *DemoServiceI) Get(ctx context.Context, req *demo.GetRequest) (*demo.GetResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *demo.GetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *demo.GetRequest) (*demo.GetResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *demo.GetRequest) *demo.GetResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*demo.GetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *demo.GetRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDemoServiceI creates a new instance of DemoServiceI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDemoServiceI(t interface {
	mock.TestingT
	Cleanup(func())
}) *DemoServiceI {
	mock := &DemoServiceI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
